/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, TemplateRef, ViewChild, ViewEncapsulation, ElementRef, ChangeDetectionStrategy, HostBinding, NgZone } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ESCAPE } from '@angular/cdk/keycodes';
import { throwMdePopoverInvalidPositionX, throwMdePopoverInvalidPositionY } from './popover-errors';
import { transformPopover } from './popover-animations';
export class MdePopover {
    /**
     * @param {?} _elementRef
     * @param {?} zone
     */
    constructor(_elementRef, zone) {
        this._elementRef = _elementRef;
        this.zone = zone;
        // tslint:disable-line:component-class-suffix
        this.role = 'dialog';
        /**
         * Settings for popover, view setters and getters for more detail
         */
        this._positionX = 'after';
        this._positionY = 'below';
        this._triggerEvent = 'hover';
        this._enterDelay = 200;
        this._leaveDelay = 200;
        this._overlapTrigger = true;
        this._disableAnimation = false;
        this._targetOffsetX = 0;
        this._targetOffsetY = 0;
        this._arrowOffsetX = 20;
        this._arrowWidth = 8;
        this._arrowColor = 'rgba(0, 0, 0, 0.12)';
        this._closeOnClick = true;
        this._focusTrapEnabled = true;
        this._focusTrapAutoCaptureEnabled = true;
        /**
         * Config object to be passed into the popover's ngClass
         */
        this._classList = {};
        // TODO: Write comment description
        /**
         *
         */
        this.containerPositioning = false;
        /**
         * Closing disabled on popover
         */
        this.closeDisabled = false;
        /**
         * Emits the current animation state whenever it changes.
         */
        this._onAnimationStateChange = new EventEmitter();
        /**
         * Event emitted when the popover is closed.
         */
        this.close = new EventEmitter();
        this.setPositionClasses();
    }
    /**
     * Position of the popover in the X axis.
     * @return {?}
     */
    get positionX() { return this._positionX; }
    /**
     * @param {?} value
     * @return {?}
     */
    set positionX(value) {
        if (value !== 'before' && value !== 'after') {
            throwMdePopoverInvalidPositionX();
        }
        this._positionX = value;
        this.setPositionClasses();
    }
    /**
     * Position of the popover in the Y axis.
     * @return {?}
     */
    get positionY() { return this._positionY; }
    /**
     * @param {?} value
     * @return {?}
     */
    set positionY(value) {
        if (value !== 'above' && value !== 'below') {
            throwMdePopoverInvalidPositionY();
        }
        this._positionY = value;
        this.setPositionClasses();
    }
    /**
     * Popover trigger event
     * @return {?}
     */
    get triggerEvent() { return this._triggerEvent; }
    /**
     * @param {?} value
     * @return {?}
     */
    set triggerEvent(value) { this._triggerEvent = value; }
    /**
     * Popover enter delay
     * @return {?}
     */
    get enterDelay() { return this._enterDelay; }
    /**
     * @param {?} value
     * @return {?}
     */
    set enterDelay(value) { this._enterDelay = value; }
    /**
     * Popover leave delay
     * @return {?}
     */
    get leaveDelay() { return this._leaveDelay; }
    /**
     * @param {?} value
     * @return {?}
     */
    set leaveDelay(value) { this._leaveDelay = value; }
    /**
     * Popover overlap trigger
     * @return {?}
     */
    get overlapTrigger() { return this._overlapTrigger; }
    /**
     * @param {?} value
     * @return {?}
     */
    set overlapTrigger(value) { this._overlapTrigger = value; }
    /**
     * Popover target offset x
     * @return {?}
     */
    get targetOffsetX() { return this._targetOffsetX; }
    /**
     * @param {?} value
     * @return {?}
     */
    set targetOffsetX(value) { this._targetOffsetX = value; }
    /**
     * Popover target offset y
     * @return {?}
     */
    get targetOffsetY() { return this._targetOffsetY; }
    /**
     * @param {?} value
     * @return {?}
     */
    set targetOffsetY(value) { this._targetOffsetY = value; }
    /**
     * Popover arrow offset x
     * @return {?}
     */
    get arrowOffsetX() { return this._arrowOffsetX; }
    /**
     * @param {?} value
     * @return {?}
     */
    set arrowOffsetX(value) { this._arrowOffsetX = value; }
    /**
     * Popover arrow width
     * @return {?}
     */
    get arrowWidth() { return this._arrowWidth; }
    /**
     * @param {?} value
     * @return {?}
     */
    set arrowWidth(value) { this._arrowWidth = value; }
    /**
     * Popover arrow color
     * @return {?}
     */
    get arrowColor() { return this._arrowColor; }
    /**
     * @param {?} value
     * @return {?}
     */
    set arrowColor(value) { this._arrowColor = value; }
    /**
     * Popover container close on click
     * default: true
     * @return {?}
     */
    get closeOnClick() { return this._closeOnClick; }
    /**
     * @param {?} value
     * @return {?}
     */
    set closeOnClick(value) { this._closeOnClick = coerceBooleanProperty(value); }
    /**
     * Disable animations of popover and all child elements
     * default: false
     * @return {?}
     */
    get disableAnimation() { return this._disableAnimation; }
    /**
     * @param {?} value
     * @return {?}
     */
    set disableAnimation(value) { this._disableAnimation = coerceBooleanProperty(value); }
    /**
     * Popover focus trap using cdkTrapFocus
     * default: true
     * @return {?}
     */
    get focusTrapEnabled() { return this._focusTrapEnabled; }
    /**
     * @param {?} value
     * @return {?}
     */
    set focusTrapEnabled(value) { this._focusTrapEnabled = coerceBooleanProperty(value); }
    /**
     * Popover focus trap auto capture using cdkTrapFocusAutoCapture
     * default: true
     * @return {?}
     */
    get focusTrapAutoCaptureEnabled() { return this._focusTrapAutoCaptureEnabled; }
    /**
     * @param {?} value
     * @return {?}
     */
    set focusTrapAutoCaptureEnabled(value) { this._focusTrapAutoCaptureEnabled = coerceBooleanProperty(value); }
    /**
     * This method takes classes set on the host md-popover element and applies them on the
     * popover template that displays in the overlay container.  Otherwise, it's difficult
     * to style the containing popover from outside the component.
     * @param {?} classes list of class names
     * @return {?}
     */
    set panelClass(classes) {
        if (classes && classes.length) {
            this._classList = classes.split(' ').reduce((/**
             * @param {?} obj
             * @param {?} className
             * @return {?}
             */
            (obj, className) => {
                obj[className] = true;
                return obj;
            }), {});
            this._elementRef.nativeElement.className = '';
            this.setPositionClasses();
        }
    }
    /**
     * This method takes classes set on the host md-popover element and applies them on the
     * popover template that displays in the overlay container.  Otherwise, it's difficult
     * to style the containing popover from outside the component.
     * @deprecated Use `panelClass` instead.
     * @return {?}
     */
    get classList() { return this.panelClass; }
    /**
     * @param {?} classes
     * @return {?}
     */
    set classList(classes) { this.panelClass = classes; }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._emitCloseEvent();
        this.close.complete();
    }
    /**
     * Handle a keyboard event from the popover, delegating to the appropriate action.
     * @param {?} event
     * @return {?}
     */
    _handleKeydown(event) {
        switch (event.keyCode) {
            case ESCAPE:
                this._emitCloseEvent();
                return;
        }
    }
    /**
     * This emits a close event to which the trigger is subscribed. When emitted, the
     * trigger will close the popover.
     * @return {?}
     */
    _emitCloseEvent() {
        this.close.emit();
    }
    /**
     * Close popover on click if closeOnClick is true
     * @return {?}
     */
    onClick() {
        if (this.closeOnClick) {
            this._emitCloseEvent();
        }
    }
    /**
       * TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.
       * https://github.com/angular/material2/pull/5493#issuecomment-313085323
       */
    /**
     * Disables close of popover when leaving trigger element and mouse over the popover
     * @return {?}
     */
    onMouseOver() {
        if (this.triggerEvent === 'hover') {
            this.closeDisabled = true;
        }
    }
    /**
     * Enables close of popover when mouse leaving popover element
     * @return {?}
     */
    onMouseLeave() {
        if (this.triggerEvent === 'hover') {
            this.closeDisabled = false;
            this._emitCloseEvent();
        }
    }
    // TODO: Refactor how styles are set and updated on the component, use best practices.
    // TODO: If arrow left and right positioning is requested, see if flex direction can be used to work with order.
    /**
     * Sets the current styles for the popover to allow for dynamically changing settings
     * @return {?}
     */
    setCurrentStyles() {
        // TODO: See if arrow position can be calculated automatically and allow override.
        // TODO: See if flex order is a better alternative to position arrow top or bottom.
        this.popoverArrowStyles = {
            'right': this.positionX === 'before' ? (this.arrowOffsetX - this.arrowWidth) + 'px' : '',
            'left': this.positionX === 'after' ? (this.arrowOffsetX - this.arrowWidth) + 'px' : '',
            'border-top': this.positionY === 'below' ?
                this.arrowWidth + 'px solid ' + this.arrowColor : '0px solid transparent',
            'border-right': 'undefined' === undefined ?
                this.arrowWidth + 'px solid ' + this.arrowColor :
                this.arrowWidth + 'px solid transparent',
            'border-bottom': this.positionY === 'above' ?
                this.arrowWidth + 'px solid ' + this.arrowColor :
                this.arrowWidth + 'px solid transparent',
            'border-left': 'undefined' === undefined ?
                this.arrowWidth + 'px solid ' + this.arrowColor :
                this.arrowWidth + 'px solid transparent',
        };
        // TODO: Remove if flex order is added.
        this.popoverContentStyles = {
            'padding-top': this.overlapTrigger === true ? '0px' : this.arrowWidth + 'px',
            'padding-bottom': this.overlapTrigger === true ? '0px' : (this.arrowWidth) + 'px',
            'margin-top': this.overlapTrigger === false && this.positionY === 'below' && this.containerPositioning === false ?
                -(this.arrowWidth * 2) + 'px' : '0px'
        };
    }
    /**
     * It's necessary to set position-based classes to ensure the popover panel animation
     * folds out from the correct direction.
     * @param {?=} posX
     * @param {?=} posY
     * @return {?}
     */
    setPositionClasses(posX = this.positionX, posY = this.positionY) {
        this._classList['mde-popover-before'] = posX === 'before';
        this._classList['mde-popover-after'] = posX === 'after';
        this._classList['mde-popover-above'] = posY === 'above';
        this._classList['mde-popover-below'] = posY === 'below';
    }
}
MdePopover.decorators = [
    { type: Component, args: [{
                selector: 'mde-popover',
                template: "<ng-template>\r\n  <div class=\"mde-popover-panel\" role=\"dialog\" [class.mde-popover-overlap]=\"overlapTrigger\"\r\n       [ngClass]=\"_classList\" [ngStyle]=\"popoverPanelStyles\" (keydown)=\"_handleKeydown($event)\"\r\n       (click)=\"onClick()\" (mouseover)=\"onMouseOver()\" (mouseleave)=\"onMouseLeave()\" [@.disabled]=\"disableAnimation\"\r\n       [@transformPopover]=\"'enter'\">\r\n    <div class=\"mde-popover-direction-arrow\" [ngStyle]=\"popoverArrowStyles\" *ngIf=\"!overlapTrigger\"></div>\r\n    <div class=\"mde-popover-content\" [ngStyle]=\"popoverContentStyles\" [cdkTrapFocus]=\"focusTrapEnabled\" [cdkTrapFocusAutoCapture]=\"focusTrapAutoCaptureEnabled\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                animations: [
                    transformPopover
                ],
                exportAs: 'mdePopover',
                styles: [".mde-popover-panel{display:flex;flex-direction:column;max-height:calc(100vh + 48px)}.mde-popover-ripple{position:absolute;top:0;left:0;bottom:0;right:0}.mde-popover-below .mde-popover-direction-arrow{position:absolute;bottom:0;width:0;height:0;border-bottom-width:0!important;z-index:99999}.mde-popover-above .mde-popover-direction-arrow{position:absolute;top:0;width:0;height:0;border-top-width:0!important;z-index:99999}.mde-popover-after .mde-popover-direction-arrow{left:20px}.mde-popover-before .mde-popover-direction-arrow{right:20px}"]
            }] }
];
/** @nocollapse */
MdePopover.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone }
];
MdePopover.propDecorators = {
    role: [{ type: HostBinding, args: ['attr.role',] }],
    positionX: [{ type: Input, args: ['mdePopoverPositionX',] }],
    positionY: [{ type: Input, args: ['mdePopoverPositionY',] }],
    triggerEvent: [{ type: Input, args: ['mdePopoverTriggerOn',] }],
    enterDelay: [{ type: Input, args: ['mdePopoverEnterDelay',] }],
    leaveDelay: [{ type: Input, args: ['mdePopoverLeaveDelay',] }],
    overlapTrigger: [{ type: Input, args: ['mdePopoverOverlapTrigger',] }],
    targetOffsetX: [{ type: Input, args: ['mdePopoverOffsetX',] }],
    targetOffsetY: [{ type: Input, args: ['mdePopoverOffsetY',] }],
    arrowOffsetX: [{ type: Input, args: ['mdePopoverArrowOffsetX',] }],
    arrowWidth: [{ type: Input, args: ['mdePopoverArrowWidth',] }],
    arrowColor: [{ type: Input, args: ['mdePopoverArrowColor',] }],
    closeOnClick: [{ type: Input, args: ['mdePopoverCloseOnClick',] }],
    disableAnimation: [{ type: Input, args: ['mdePopoverDisableAnimation',] }],
    focusTrapEnabled: [{ type: Input, args: ['mdeFocusTrapEnabled',] }],
    focusTrapAutoCaptureEnabled: [{ type: Input, args: ['mdeFocusTrapAutoCaptureEnabled',] }],
    panelClass: [{ type: Input, args: ['class',] }],
    classList: [{ type: Input }],
    close: [{ type: Output }],
    templateRef: [{ type: ViewChild, args: [TemplateRef, { static: false },] }]
};
if (false) {
    /** @type {?} */
    MdePopover.prototype.role;
    /**
     * Settings for popover, view setters and getters for more detail
     * @type {?}
     * @private
     */
    MdePopover.prototype._positionX;
    /**
     * @type {?}
     * @private
     */
    MdePopover.prototype._positionY;
    /**
     * @type {?}
     * @private
     */
    MdePopover.prototype._triggerEvent;
    /**
     * @type {?}
     * @private
     */
    MdePopover.prototype._enterDelay;
    /**
     * @type {?}
     * @private
     */
    MdePopover.prototype._leaveDelay;
    /**
     * @type {?}
     * @private
     */
    MdePopover.prototype._overlapTrigger;
    /**
     * @type {?}
     * @private
     */
    MdePopover.prototype._disableAnimation;
    /**
     * @type {?}
     * @private
     */
    MdePopover.prototype._targetOffsetX;
    /**
     * @type {?}
     * @private
     */
    MdePopover.prototype._targetOffsetY;
    /**
     * @type {?}
     * @private
     */
    MdePopover.prototype._arrowOffsetX;
    /**
     * @type {?}
     * @private
     */
    MdePopover.prototype._arrowWidth;
    /**
     * @type {?}
     * @private
     */
    MdePopover.prototype._arrowColor;
    /**
     * @type {?}
     * @private
     */
    MdePopover.prototype._closeOnClick;
    /**
     * @type {?}
     * @private
     */
    MdePopover.prototype._focusTrapEnabled;
    /**
     * @type {?}
     * @private
     */
    MdePopover.prototype._focusTrapAutoCaptureEnabled;
    /**
     * Config object to be passed into the popover's ngClass
     * @type {?}
     */
    MdePopover.prototype._classList;
    /**
     *
     * @type {?}
     */
    MdePopover.prototype.containerPositioning;
    /**
     * Closing disabled on popover
     * @type {?}
     */
    MdePopover.prototype.closeDisabled;
    /**
     * Config object to be passed into the popover's arrow ngStyle
     * @type {?}
     */
    MdePopover.prototype.popoverPanelStyles;
    /**
     * Config object to be passed into the popover's arrow ngStyle
     * @type {?}
     */
    MdePopover.prototype.popoverArrowStyles;
    /**
     * Config object to be passed into the popover's content ngStyle
     * @type {?}
     */
    MdePopover.prototype.popoverContentStyles;
    /**
     * Emits the current animation state whenever it changes.
     * @type {?}
     */
    MdePopover.prototype._onAnimationStateChange;
    /**
     * Event emitted when the popover is closed.
     * @type {?}
     */
    MdePopover.prototype.close;
    /** @type {?} */
    MdePopover.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    MdePopover.prototype._elementRef;
    /** @type {?} */
    MdePopover.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,